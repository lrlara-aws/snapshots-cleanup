{
  "version": "tree-0.1",
  "tree": {
    "id": "App",
    "path": "",
    "children": {
      "Tree": {
        "id": "Tree",
        "path": "Tree",
        "constructInfo": {
          "fqn": "constructs.Construct",
          "version": "10.1.175"
        }
      },
      "SnapshotsCleanupStack": {
        "id": "SnapshotsCleanupStack",
        "path": "SnapshotsCleanupStack",
        "children": {
          "tag_key": {
            "id": "tag_key",
            "path": "SnapshotsCleanupStack/tag_key",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "tag_values": {
            "id": "tag_values",
            "path": "SnapshotsCleanupStack/tag_values",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "region": {
            "id": "region",
            "path": "SnapshotsCleanupStack/region",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "max_days": {
            "id": "max_days",
            "path": "SnapshotsCleanupStack/max_days",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "cleanup_last_snapshot": {
            "id": "cleanup_last_snapshot",
            "path": "SnapshotsCleanupStack/cleanup_last_snapshot",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "email_for_notification": {
            "id": "email_for_notification",
            "path": "SnapshotsCleanupStack/email_for_notification",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "s3_bucket_name": {
            "id": "s3_bucket_name",
            "path": "SnapshotsCleanupStack/s3_bucket_name",
            "constructInfo": {
              "fqn": "aws-cdk-lib.CfnParameter",
              "version": "2.39.1"
            }
          },
          "Lambda-CleanUp-Snap-Role": {
            "id": "Lambda-CleanUp-Snap-Role",
            "path": "SnapshotsCleanupStack/Lambda-CleanUp-Snap-Role",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "SnapshotsCleanupStack/Lambda-CleanUp-Snap-Role/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::IAM::Role",
                  "aws:cdk:cloudformation:props": {
                    "assumeRolePolicyDocument": {
                      "Statement": [
                        {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": {
                            "Service": "lambda.amazonaws.com"
                          }
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "description": "Role for Lambda snapshots-maintainer-production",
                    "managedPolicyArns": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                          ]
                        ]
                      }
                    ],
                    "policies": [
                      {
                        "policyName": "snapshotAccess",
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": [
                                "ec2:DeleteSnapshot",
                                "ec2:DescribeSnapshots",
                                "ec2:DescribeVolumes",
                                "rds:DeleteDBSnapshot",
                                "rds:DescribeDBSnapshots"
                              ],
                              "Condition": {
                                "ForAllValues:StringEquals": {
                                  "aws:TagKeys": [
                                    {
                                      "Ref": "tagkey"
                                    }
                                  ],
                                  "aws:TagValues": [
                                    {
                                      "Ref": "tagvalues"
                                    }
                                  ]
                                }
                              },
                              "Effect": "Allow",
                              "Resource": [
                                {
                                  "Fn::Join": [
                                    "",
                                    [
                                      "arn:aws:ec2:",
                                      {
                                        "Ref": "region"
                                      },
                                      "::snapshot/*"
                                    ]
                                  ]
                                },
                                {
                                  "Fn::Join": [
                                    "",
                                    [
                                      "arn:aws:rds:",
                                      {
                                        "Ref": "region"
                                      },
                                      ":236667872386:snapshot:*"
                                    ]
                                  ]
                                }
                              ]
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      },
                      {
                        "policyName": "bucketAccess",
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": "s3:PutObject",
                              "Effect": "Allow",
                              "Resource": {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:aws:s3:::",
                                    {
                                      "Ref": "s3bucketname"
                                    },
                                    "236667872386/*"
                                  ]
                                ]
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        }
                      }
                    ],
                    "roleName": "snapshots-maintainer-ServiceRole"
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.CfnRole",
                  "version": "2.39.1"
                }
              },
              "DefaultPolicy": {
                "id": "DefaultPolicy",
                "path": "SnapshotsCleanupStack/Lambda-CleanUp-Snap-Role/DefaultPolicy",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "SnapshotsCleanupStack/Lambda-CleanUp-Snap-Role/DefaultPolicy/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::IAM::Policy",
                      "aws:cdk:cloudformation:props": {
                        "policyDocument": {
                          "Statement": [
                            {
                              "Action": [
                                "kms:Decrypt",
                                "kms:Encrypt",
                                "kms:GenerateDataKey*",
                                "kms:ReEncrypt*"
                              ],
                              "Effect": "Allow",
                              "Resource": {
                                "Fn::GetAtt": [
                                  "kmskeyforsnapshotsmaintainerproductiontopic103A2292",
                                  "Arn"
                                ]
                              }
                            },
                            {
                              "Action": "sns:Publish",
                              "Effect": "Allow",
                              "Resource": {
                                "Ref": "Topicforsnapshotsmaintainerproduction9A4928DA"
                              }
                            }
                          ],
                          "Version": "2012-10-17"
                        },
                        "policyName": "LambdaCleanUpSnapRoleDefaultPolicyD257D640",
                        "roles": [
                          {
                            "Ref": "LambdaCleanUpSnapRoleA7A90465"
                          }
                        ]
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_iam.CfnPolicy",
                      "version": "2.39.1"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_iam.Policy",
                  "version": "2.39.1"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_iam.Role",
              "version": "2.39.1"
            }
          },
          "snapshots-maintainer-production": {
            "id": "snapshots-maintainer-production",
            "path": "SnapshotsCleanupStack/snapshots-maintainer-production",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "SnapshotsCleanupStack/snapshots-maintainer-production/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Function",
                  "aws:cdk:cloudformation:props": {
                    "code": {
                      "zipFile": "import boto3\nfrom botocore import exceptions\nimport datetime\nfrom logging import getLogger, INFO, DEBUG\nfrom os import environ, chdir\nimport csv\n\n# Logger setup\nlogger = getLogger()\nlogger.setLevel(INFO)\n\ndeleted_ebs_snapshots = []\nskipped_ebs_snapshots = []\n\ndeleted_rds_snapshots = []\nskipped_rds_snapshots = []\n\nSUCCESS = \"deleted\"\nFAILURE = \"skipped\"\n\n\ndef proccess_rds_snapshot_arn_for_elegibility(db_snapshot_name):\n    if db_snapshot_name.__contains__(\"tce-replicator-dbsnapshot\") or db_snapshot_name.__contains__(\"tce-replicator-final-dbsnapshot\"):\n        return True\n    else:\n        return False\n\n\ndef send_report_to_s3():\n    ebs_file_name = create_report_files(\"EBS\")\n    rds_file_name = create_report_files(\"RDS\")\n    bucket_name = environ[\"s3_bucket_name\"]\n\n    s3_client = boto3.client('s3')\n    try:\n        s3_client.upload_file(\n            f\"/tmp/{ebs_file_name}\", bucket_name, ebs_file_name)\n        s3_client.upload_file(\n            f\"/tmp/{rds_file_name}\", bucket_name, rds_file_name)\n    except exceptions.ClientError as e:\n        logger.info(f\"Error on Put opperation. Details: {e}\")\n\n\ndef create_report_files(report_type):\n    file_creation_date = datetime.datetime.now().date()\n    chdir('/tmp')\n    filename = f\"{file_creation_date}-{report_type}-report.csv\"\n    file_tmp_path = f\"/tmp/{filename}\"\n    file_handler = open(file_tmp_path, 'w')\n\n    report_list = []\n    if report_type == \"EBS\":\n        fieldnames = ['SnapshotId', 'VolumeId', 'Status', 'Error']\n        writer = csv.DictWriter(file_handler, fieldnames=fieldnames)\n        writer.writeheader()\n        report_list = deleted_ebs_snapshots + skipped_ebs_snapshots\n        writer.writerows(report_list)\n    else:\n        fieldnames = ['DBSnapshotIdentifier',\n                      'DBInstanceIdentifier', 'Status', 'Error']\n        writer = csv.DictWriter(file_handler, fieldnames=fieldnames)\n        writer.writeheader()\n        report_list = deleted_rds_snapshots + skipped_rds_snapshots\n        writer.writerows(report_list)\n\n    file_handler.close()\n\n    return filename\n\n\ndef check_snapshot_count(paginator_array, key):\n    total_snapshot_in_filter = 0\n    for page in paginator_array:\n        total_snapshot_in_filter += len(page[key])\n    return total_snapshot_in_filter\n\n\ndef build_snapshots_report(snapshot, report, snapshot_type, status, failure_reason=\"-\"):\n    if snapshot_type == \"EBS\":\n        snapshot_data = {\"SnapshotId\": snapshot[\"SnapshotId\"],\n                         \"VolumeId\": snapshot[\"VolumeId\"],\n                         \"Status\": status, \"Error\": failure_reason}\n    else:\n        snapshot_data = {\"DBSnapshotIdentifier\": snapshot[\"DBSnapshotIdentifier\"],\n                         \"DBInstanceIdentifier\": snapshot[\"DBInstanceIdentifier\"],\n                         \"Status\": status, \"Error\": failure_reason}\n    report.append(snapshot_data)\n\n\ndef send_notification_on_failure(snapshot_type, total_snapshot_scanned, aws_account_id, skipped_report):\n    # TODO: Pass the bucket/file to reference the file containing the errors details\n    sns = boto3.client(\"sns\")\n    skipped_snapshots_count = len(skipped_report) if len(\n        skipped_report) > 0 else 0\n\n    if skipped_snapshots_count > 0:\n        bucket = environ[\"s3_bucket_name\"]\n        message = f\"Total scanned: {total_snapshot_scanned}\\n Total skipped(Need Attention!.Check today's report in bucket -> {bucket}): {skipped_snapshots_count}\\n\"\n        target_region = environ[\"region\"]\n        sns.publish(\n            TopicArn=environ[\"sns_topic_arn\"],\n            Message=message,\n            Subject=f\"{snapshot_type} snapshot cleanup failures in region: {target_region}, account: {aws_account_id} \"\n        )\n\n        logger.info(f\"Skipped {snapshot_type} Snapshots\")\n        logger.info(skipped_report)\n\n\ndef delete_ebs_snapshots(page_iterator, ec2, aws_account_id, total_ebs_snapshot_count, clean_up_last):\n    now_time = datetime.datetime.now().date()\n    total_snapshot_scanned = 0\n    total_snapshot_cleaned = 0\n\n    snapshot_type = \"EBS\"\n    for page in page_iterator:\n        for snapshot in page['Snapshots']:\n            total_snapshot_scanned += 1\n            snapshot_id = snapshot[\"SnapshotId\"]\n            logger.debug(f\"Proccessing -> {snapshot_id}\")\n            snapshot_creation_date = snapshot['StartTime'].date()\n            logger.debug(f\"Date Created -> {snapshot_creation_date}\")\n            # Calculate the difference\n            existed_since = (now_time - snapshot_creation_date).days\n            logger.debug(f\"On for -> {existed_since} days\")\n            logger.info(f\"{snapshot_id} On for -> {existed_since}\")\n            delete_older_than = int(environ[\"max_days_gold\"])\n            logger.info(f\"delete older than -> {delete_older_than}\")\n            if (existed_since > delete_older_than):\n                try:\n                    logger.debug(f\"Attempting to delete -> {snapshot_id}\")\n                    logger.debug(\n                        f\"total_ebs_snapshot_count -> {total_ebs_snapshot_count}\")\n                    logger.debug(\n                        f\"total_snapshot_cleaned -> {total_snapshot_cleaned}\")\n                    logger.debug(\n                        f\"total_ebs_snapshot_count - total_snapshot_cleaned -> {total_ebs_snapshot_count - total_snapshot_cleaned}\")\n                    logger.debug(f\"clean_up_last -> {clean_up_last}\")\n                    if (total_ebs_snapshot_count - total_snapshot_cleaned) > 1 or ((total_ebs_snapshot_count - total_snapshot_cleaned) == 1 and clean_up_last == \"1\"):\n                        ec2.delete_snapshot(\n                            SnapshotId=snapshot_id)\n                        total_snapshot_cleaned += 1\n                        logger.info(f\"deleted -> {snapshot_id}\")\n                        build_snapshots_report(\n                            snapshot, deleted_ebs_snapshots, snapshot_type, SUCCESS)\n\n                # Catch an exception if the snap is in use\n                except exceptions.ClientError as err:\n                    logger.info(f\"exception deleting -> {snapshot_id}\")\n                    logger.info(f\"error details -> {err}\")\n                    build_snapshots_report(\n                        snapshot, skipped_ebs_snapshots, snapshot_type, FAILURE, f\"{err}\")\n                    continue\n\n    send_report_to_s3()\n    send_notification_on_failure(\"EBS\", total_snapshot_scanned,\n                                 aws_account_id, skipped_ebs_snapshots)\n\n\ndef delete_rds_snapshots(rds_page_iterator, rds, aws_account_id, total_rds_snapshot_count, clean_up_last):\n    now_time = datetime.datetime.now().date()\n    total_snapshot_scanned = 0\n    total_snapshot_cleaned = 0\n\n    snapshot_type = \"RDS\"\n    for page in rds_page_iterator:\n        for snapshot in page['DBSnapshots']:\n            total_snapshot_scanned += 1\n            snapshot_id = snapshot[\"DBSnapshotIdentifier\"]\n            logger.debug(f\"Proccessing -> {snapshot_id}\")\n            snapshot_creation_date = snapshot['SnapshotCreateTime'].date()\n            logger.debug(f\"Date Created -> {snapshot_creation_date}\")\n            # Calculate the difference\n            existed_since = (now_time - snapshot_creation_date).days\n            logger.info(f\"{snapshot_id} On for -> {existed_since} days\")\n            delete_older_than = int(environ[\"max_days_gold\"])\n            if (existed_since > delete_older_than):\n                try:\n                    logger.debug(f\"Attempting to delete -> {snapshot_id}\")\n                    logger.debug(\n                        f\"total_rds_snapshot_count -> {total_rds_snapshot_count}\")\n                    logger.debug(\n                        f\"total_snapshot_cleaned -> {total_snapshot_cleaned}\")\n                    logger.debug(\n                        f\"total_rds_snapshot_count - total_snapshot_cleaned -> {total_rds_snapshot_count - total_snapshot_cleaned}\")\n                    logger.debug(f\"clean_up_last -> {clean_up_last}\")\n\n                    if (total_rds_snapshot_count - total_snapshot_cleaned) > 1 or ((total_rds_snapshot_count - total_snapshot_cleaned) == 1 and clean_up_last == \"1\"):\n                        rds.delete_db_snapshot(\n                            DBSnapshotIdentifier=snapshot_id)\n                        total_snapshot_cleaned += 1\n                        logger.info(f\"deleted -> {snapshot_id}\")\n                        build_snapshots_report(\n                            snapshot, deleted_rds_snapshots, snapshot_type, SUCCESS)\n\n                # Catch an exception if the snap is in use\n                except exceptions.ClientError as err:\n                    logger.info(f\"exception deleting -> {snapshot_id}\")\n                    logger.info(f\"error details -> {err}\")\n                    build_snapshots_report(\n                        snapshot, skipped_rds_snapshots, snapshot_type, FAILURE, f\"{err}\")\n                    continue\n\n    send_report_to_s3()\n    send_notification_on_failure(\"RDS\", total_snapshot_scanned,\n                                 aws_account_id, skipped_rds_snapshots)\n\n\ndef lambda_handler(event, context):\n\n    if \"debug\" in event:\n        logger.setLevel(DEBUG)\n\n    logger.info(event)\n    aws_account_id = context.invoked_function_arn.split(\":\")[4]\n\n    # filters\n    tag_key = environ[\"tag_key\"]\n    tag_values = environ[\"tag_values\"].split(\",\")\n    target_region = environ[\"region\"]\n    clean_up_last = environ[\"cleanup_last_snapshot\"]\n\n    boto3_custom_region_session = boto3.session.Session(\n        region_name=target_region)\n    ec2 = boto3_custom_region_session.client(\"ec2\")\n    rds = boto3_custom_region_session.client(\"rds\")\n\n    ebs_page_iterator = ec2.get_paginator('describe_snapshots').paginate(Filters=[\n        {\"Name\": f\"tag:{tag_key}\", \"Values\": tag_values}])\n\n    total_ebs_snapshot_count = check_snapshot_count(\n        ebs_page_iterator, \"Snapshots\")\n    rds_page_iterator = rds.get_paginator(\n        'describe_db_snapshots').paginate(Filters=[{\"Name\": \"snapshot-type\", \"Values\": [\"manual\"]}])\n\n    total_rds_snapshot_count = check_snapshot_count(\n        rds_page_iterator, \"DBSnapshots\")\n\n    logger.debug(\"All EBS snapshots in list:\")\n    logger.debug(ebs_page_iterator)\n\n    logger.debug(\"All RDS snapshots in list:\")\n    logger.debug(rds_page_iterator)\n\n    logger.info(f\"total snapshots in ebs list {total_ebs_snapshot_count}\")\n    logger.info(f\"total snapshots in rds list {total_rds_snapshot_count}\")\n\n    if total_ebs_snapshot_count > 1 or (total_ebs_snapshot_count == 1 and clean_up_last == \"1\"):\n        delete_ebs_snapshots(ebs_page_iterator, ec2,\n                             aws_account_id, total_ebs_snapshot_count, clean_up_last)\n    else:\n        logger.info(\n            f\"Snapshot in list: Do not clean.\\n No Report sent.\")\n\n    if total_rds_snapshot_count > 1 or (total_rds_snapshot_count == 1 and clean_up_last == 1):\n        delete_rds_snapshots(rds_page_iterator, rds,\n                             aws_account_id, total_rds_snapshot_count, clean_up_last)\n    else:\n        logger.info(\n            f\"Snapshot in list: Do not clean.\\n No Report sent.\")\n"
                    },
                    "role": {
                      "Fn::GetAtt": [
                        "LambdaCleanUpSnapRoleA7A90465",
                        "Arn"
                      ]
                    },
                    "environment": {
                      "variables": {
                        "tag_key": {
                          "Ref": "tagkey"
                        },
                        "tag_values": {
                          "Ref": "tagvalues"
                        },
                        "region": {
                          "Ref": "region"
                        },
                        "max_days_gold": {
                          "Ref": "maxdays"
                        },
                        "cleanup_last_snapshot": {
                          "Ref": "cleanuplastsnapshot"
                        },
                        "s3_bucket_name": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Ref": "s3bucketname"
                              },
                              "236667872386"
                            ]
                          ]
                        },
                        "sns_topic_arn": {
                          "Ref": "Topicforsnapshotsmaintainerproduction9A4928DA"
                        }
                      }
                    },
                    "functionName": "snapshots-maintainer-production",
                    "handler": "index.lambda_handler",
                    "memorySize": 128,
                    "runtime": "python3.9",
                    "timeout": 300
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnFunction",
                  "version": "2.39.1"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_lambda.Function",
              "version": "2.39.1"
            }
          },
          "Rule_CloudWatchT_snapshots-maintainer-production": {
            "id": "Rule_CloudWatchT_snapshots-maintainer-production",
            "path": "SnapshotsCleanupStack/Rule_CloudWatchT_snapshots-maintainer-production",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "SnapshotsCleanupStack/Rule_CloudWatchT_snapshots-maintainer-production/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Events::Rule",
                  "aws:cdk:cloudformation:props": {
                    "name": "Daily-trigger-for-snapshotCleanup",
                    "scheduleExpression": "cron(00 01 ? * * *)",
                    "state": "ENABLED",
                    "targets": [
                      {
                        "id": "Target0",
                        "arn": {
                          "Fn::GetAtt": [
                            "snapshotsmaintainerproduction7A5F9028",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_events.CfnRule",
                  "version": "2.39.1"
                }
              },
              "AllowEventRuleSnapshotsCleanupStacksnapshotsmaintainerproduction7FE424CA": {
                "id": "AllowEventRuleSnapshotsCleanupStacksnapshotsmaintainerproduction7FE424CA",
                "path": "SnapshotsCleanupStack/Rule_CloudWatchT_snapshots-maintainer-production/AllowEventRuleSnapshotsCleanupStacksnapshotsmaintainerproduction7FE424CA",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::Lambda::Permission",
                  "aws:cdk:cloudformation:props": {
                    "action": "lambda:InvokeFunction",
                    "functionName": {
                      "Fn::GetAtt": [
                        "snapshotsmaintainerproduction7A5F9028",
                        "Arn"
                      ]
                    },
                    "principal": "events.amazonaws.com",
                    "sourceArn": {
                      "Fn::GetAtt": [
                        "RuleCloudWatchTsnapshotsmaintainerproduction35D70016",
                        "Arn"
                      ]
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_lambda.CfnPermission",
                  "version": "2.39.1"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_events.Rule",
              "version": "2.39.1"
            }
          },
          "kmskey_for_snapshots-maintainer-production_topic": {
            "id": "kmskey_for_snapshots-maintainer-production_topic",
            "path": "SnapshotsCleanupStack/kmskey_for_snapshots-maintainer-production_topic",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "SnapshotsCleanupStack/kmskey_for_snapshots-maintainer-production_topic/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::KMS::Key",
                  "aws:cdk:cloudformation:props": {
                    "keyPolicy": {
                      "Statement": [
                        {
                          "Action": "kms:*",
                          "Effect": "Allow",
                          "Principal": {
                            "AWS": {
                              "Fn::Join": [
                                "",
                                [
                                  "arn:",
                                  {
                                    "Ref": "AWS::Partition"
                                  },
                                  ":iam::236667872386:root"
                                ]
                              ]
                            }
                          },
                          "Resource": "*"
                        }
                      ],
                      "Version": "2012-10-17"
                    },
                    "description": "kms key to use in snapshots-maintainer-production sns notification",
                    "enabled": true,
                    "enableKeyRotation": true
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_kms.CfnKey",
                  "version": "2.39.1"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_kms.Key",
              "version": "2.39.1"
            }
          },
          "Topic_for_snapshots-maintainer-production": {
            "id": "Topic_for_snapshots-maintainer-production",
            "path": "SnapshotsCleanupStack/Topic_for_snapshots-maintainer-production",
            "children": {
              "Resource": {
                "id": "Resource",
                "path": "SnapshotsCleanupStack/Topic_for_snapshots-maintainer-production/Resource",
                "attributes": {
                  "aws:cdk:cloudformation:type": "AWS::SNS::Topic",
                  "aws:cdk:cloudformation:props": {
                    "kmsMasterKeyId": {
                      "Fn::GetAtt": [
                        "kmskeyforsnapshotsmaintainerproductiontopic103A2292",
                        "Arn"
                      ]
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_sns.CfnTopic",
                  "version": "2.39.1"
                }
              },
              "TokenSubscription:1": {
                "id": "TokenSubscription:1",
                "path": "SnapshotsCleanupStack/Topic_for_snapshots-maintainer-production/TokenSubscription:1",
                "children": {
                  "Resource": {
                    "id": "Resource",
                    "path": "SnapshotsCleanupStack/Topic_for_snapshots-maintainer-production/TokenSubscription:1/Resource",
                    "attributes": {
                      "aws:cdk:cloudformation:type": "AWS::SNS::Subscription",
                      "aws:cdk:cloudformation:props": {
                        "protocol": "email",
                        "topicArn": {
                          "Ref": "Topicforsnapshotsmaintainerproduction9A4928DA"
                        },
                        "endpoint": {
                          "Ref": "emailfornotification"
                        }
                      }
                    },
                    "constructInfo": {
                      "fqn": "aws-cdk-lib.aws_sns.CfnSubscription",
                      "version": "2.39.1"
                    }
                  }
                },
                "constructInfo": {
                  "fqn": "aws-cdk-lib.aws_sns.Subscription",
                  "version": "2.39.1"
                }
              }
            },
            "constructInfo": {
              "fqn": "aws-cdk-lib.aws_sns.Topic",
              "version": "2.39.1"
            }
          },
          "ImmutableRoleLambda-CleanUp-Snap-Role": {
            "id": "ImmutableRoleLambda-CleanUp-Snap-Role",
            "path": "SnapshotsCleanupStack/ImmutableRoleLambda-CleanUp-Snap-Role",
            "constructInfo": {
              "fqn": "aws-cdk-lib.Resource",
              "version": "2.39.1"
            }
          },
          "CDKMetadata": {
            "id": "CDKMetadata",
            "path": "SnapshotsCleanupStack/CDKMetadata",
            "children": {
              "Default": {
                "id": "Default",
                "path": "SnapshotsCleanupStack/CDKMetadata/Default",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnResource",
                  "version": "2.39.1"
                }
              },
              "Condition": {
                "id": "Condition",
                "path": "SnapshotsCleanupStack/CDKMetadata/Condition",
                "constructInfo": {
                  "fqn": "aws-cdk-lib.CfnCondition",
                  "version": "2.39.1"
                }
              }
            },
            "constructInfo": {
              "fqn": "constructs.Construct",
              "version": "10.1.175"
            }
          }
        },
        "constructInfo": {
          "fqn": "aws-cdk-lib.Stack",
          "version": "2.39.1"
        }
      }
    },
    "constructInfo": {
      "fqn": "aws-cdk-lib.App",
      "version": "2.39.1"
    }
  }
}